version: '3.9'

services:
  # ============================================================================
  # Databases
  # ============================================================================

  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: semiconductorlab-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: semiconductorlab_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: semiconductorlab-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend

  # ============================================================================
  # Message Broker
  # ============================================================================

  nats:
    image: nats:2.10-alpine
    container_name: semiconductorlab-nats
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--max_file_store=10GB",
      "--max_mem_store=1GB"
    ]
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP management
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend

  # ============================================================================
  # Object Storage
  # ============================================================================

  minio:
    image: minio/minio:latest
    container_name: semiconductorlab-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend

  # ============================================================================
  # Backend Services
  # ============================================================================

  instruments:
    build:
      context: .
      dockerfile: services/instruments/Dockerfile
    container_name: semiconductorlab-instruments
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/semiconductorlab_dev
      REDIS_URL: redis://redis:6379/0
      NATS_URL: nats://nats:4222
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: semiconductorlab-data
      LOG_LEVEL: DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./services/instruments:/app
      - ./packages/common:/app/packages/common
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend

  analysis:
    build:
      context: .
      dockerfile: services/analysis/Dockerfile
    container_name: semiconductorlab-analysis
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/semiconductorlab_dev
      REDIS_URL: redis://redis:6379/1
      NATS_URL: nats://nats:4222
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: semiconductorlab-data
      LOG_LEVEL: DEBUG
    ports:
      - "8001:8001"
    volumes:
      - ./services/analysis:/app
      - ./packages/common:/app/packages/common
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    networks:
      - backend

  # Celery workers for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: services/analysis/Dockerfile
    container_name: semiconductorlab-celery
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/semiconductorlab_dev
      REDIS_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/2
      CELERY_RESULT_BACKEND: redis://redis:6379/3
    volumes:
      - ./services/analysis:/app
      - ./packages/common:/app/packages/common
    depends_on:
      - redis
      - postgres
    command: celery -A app.workers.tasks worker --loglevel=info
    networks:
      - backend

  # ============================================================================
  # Frontend
  # ============================================================================

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: semiconductorlab-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    command: pnpm dev
    networks:
      - frontend
      - backend

  # ============================================================================
  # Monitoring & Observability
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: semiconductorlab-prometheus
    volumes:
      - ./infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: semiconductorlab-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    container_name: semiconductorlab-loki
    ports:
      - "3100:3100"
    volumes:
      - ./infra/monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend

  promtail:
    image: grafana/promtail:latest
    container_name: semiconductorlab-promtail
    volumes:
      - /var/log:/var/log
      - ./infra/monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - backend

# ============================================================================
# Networks
# ============================================================================

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
