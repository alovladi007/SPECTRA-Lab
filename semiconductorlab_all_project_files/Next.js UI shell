import React, { useState } from ‘react’;
import {
Menu, Home, FlaskConical, BarChart3, Activity,
Settings, Users, Boxes, FileText, BookOpen,
ChevronDown, Bell, Search, LogOut, User
} from ‘lucide-react’;

// Mock data for demonstration
const mockUser = {
name: “John Martinez”,
email: “john.martinez@lab.com”,
role: “engineer”,
avatar: “JM”
};

const mockNotifications = [
{ id: 1, message: “Run IV-2024-001 completed”, time: “2 min ago”, unread: true },
{ id: 2, message: “SPC alert: Mobility trending down”, time: “15 min ago”, unread: true },
{ id: 3, message: “Calibration due for SMU-001”, time: “1 hour ago”, unread: false },
];

const mockRecentRuns = [
{ id: “IV-2024-001”, method: “I-V Sweep”, sample: “Wafer-Si-042”, status: “completed”, progress: 100 },
{ id: “HALL-2024-015”, method: “Hall Effect”, sample: “Die-GaN-007”, status: “running”, progress: 67 },
{ id: “XRD-2024-089”, method: “XRD”, sample: “Film-AlGaN-12”, status: “pending”, progress: 0 },
];

// Navigation structure
const navigation = [
{ name: ‘Dashboard’, icon: Home, href: ‘/dashboard’, active: true },
{ name: ‘Projects’, icon: Boxes, href: ‘/projects’ },
{ name: ‘Samples’, icon: FlaskConical, href: ‘/samples’ },
{ name: ‘Experiments’, icon: Activity, href: ‘/experiments’, badge: 2 },
{ name: ‘Results’, icon: BarChart3, href: ‘/results’ },
{ name: ‘SPC’, icon: Activity, href: ‘/spc’ },
{ name: ‘Virtual Metrology’, icon: BarChart3, href: ‘/vm’ },
{ name: ‘Notebook’, icon: BookOpen, href: ‘/notebook’ },
{ name: ‘Reports’, icon: FileText, href: ‘/reports’ },
];

const adminNavigation = [
{ name: ‘Instruments’, icon: Settings, href: ‘/admin/instruments’ },
{ name: ‘Users’, icon: Users, href: ‘/admin/users’ },
{ name: ‘Settings’, icon: Settings, href: ‘/admin/settings’ },
];

// Components
function Sidebar({ sidebarOpen, setSidebarOpen }) {
return (
<>
{/* Mobile sidebar backdrop */}
{sidebarOpen && (
<div
className=“fixed inset-0 bg-gray-900/50 lg:hidden z-40”
onClick={() => setSidebarOpen(false)}
/>
)}

```
  {/* Sidebar */}
  <div className={`
    fixed inset-y-0 left-0 z-50 w-64 bg-gray-900 transform transition-transform duration-300 ease-in-out
    lg:translate-x-0 lg:static lg:inset-0
    ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
  `}>
    <div className="flex flex-col h-full">
      {/* Logo */}
      <div className="flex items-center gap-2 px-6 py-5 border-b border-gray-800">
        <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
          <FlaskConical className="w-5 h-5 text-white" />
        </div>
        <span className="text-xl font-bold text-white">SemiconductorLab</span>
      </div>

      {/* Navigation */}
      <nav className="flex-1 px-3 py-4 space-y-1 overflow-y-auto">
        {navigation.map((item) => (
          <a
            key={item.name}
            href={item.href}
            className={`
              flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors
              ${item.active 
                ? 'bg-gray-800 text-white' 
                : 'text-gray-400 hover:text-white hover:bg-gray-800'
              }
            `}
          >
            <item.icon className="w-5 h-5" />
            <span className="flex-1">{item.name}</span>
            {item.badge && (
              <span className="px-2 py-0.5 text-xs bg-blue-500 text-white rounded-full">
                {item.badge}
              </span>
            )}
          </a>
        ))}

        <div className="pt-4 mt-4 border-t border-gray-800">
          <div className="px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Admin
          </div>
          {adminNavigation.map((item) => (
            <a
              key={item.name}
              href={item.href}
              className="flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium text-gray-400 hover:text-white hover:bg-gray-800 transition-colors"
            >
              <item.icon className="w-5 h-5" />
              <span>{item.name}</span>
            </a>
          ))}
        </div>
      </nav>

      {/* User menu */}
      <div className="p-4 border-t border-gray-800">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-semibold">
            {mockUser.avatar}
          </div>
          <div className="flex-1 min-w-0">
            <div className="text-sm font-medium text-white truncate">{mockUser.name}</div>
            <div className="text-xs text-gray-400 truncate">{mockUser.email}</div>
          </div>
          <button className="p-1 text-gray-400 hover:text-white">
            <ChevronDown className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  </div>
</>
```

);
}

function Header({ setSidebarOpen, showNotifications, setShowNotifications }) {
return (
<header className="bg-white border-b border-gray-200 sticky top-0 z-30">
<div className="flex items-center justify-between px-4 py-3">
<div className="flex items-center gap-4 flex-1">
<button
onClick={() => setSidebarOpen(true)}
className=“lg:hidden p-2 text-gray-600 hover:text-gray-900”
>
<Menu className="w-6 h-6" />
</button>

```
      <div className="relative flex-1 max-w-lg">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
        <input
          type="text"
          placeholder="Search samples, runs, instruments..."
          className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>

    <div className="flex items-center gap-2">
      <button 
        onClick={() => setShowNotifications(!showNotifications)}
        className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg"
      >
        <Bell className="w-6 h-6" />
        <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
      </button>

      <button className="flex items-center gap-2 p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg">
        <User className="w-6 h-6" />
      </button>
    </div>
  </div>

  {/* Notifications dropdown */}
  {showNotifications && (
    <div className="absolute right-4 top-16 w-96 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
      <div className="p-4 border-b border-gray-200">
        <h3 className="text-lg font-semibold">Notifications</h3>
      </div>
      <div className="max-h-96 overflow-y-auto">
        {mockNotifications.map((notif) => (
          <div
            key={notif.id}
            className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${
              notif.unread ? 'bg-blue-50' : ''
            }`}
          >
            <div className="text-sm font-medium text-gray-900">{notif.message}</div>
            <div className="text-xs text-gray-500 mt-1">{notif.time}</div>
          </div>
        ))}
      </div>
      <div className="p-3 text-center">
        <button className="text-sm text-blue-600 hover:text-blue-700 font-medium">
          View all notifications
        </button>
      </div>
    </div>
  )}
</header>
```

);
}

function StatCard({ title, value, change, icon: Icon, trend }) {
return (
<div className="bg-white rounded-lg border border-gray-200 p-6">
<div className="flex items-center justify-between">
<div>
<div className="text-sm font-medium text-gray-600">{title}</div>
<div className="text-3xl font-bold text-gray-900 mt-2">{value}</div>
<div className={`text-sm mt-2 ${trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>
{change} from last week
</div>
</div>
<div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
<Icon className="w-6 h-6 text-blue-600" />
</div>
</div>
</div>
);
}

function RunCard({ run }) {
const statusColors = {
completed: ‘bg-green-100 text-green-800’,
running: ‘bg-blue-100 text-blue-800’,
pending: ‘bg-gray-100 text-gray-800’,
failed: ‘bg-red-100 text-red-800’
};

return (
<div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
<div className="flex items-center justify-between mb-3">
<div>
<div className="font-semibold text-gray-900">{run.id}</div>
<div className="text-sm text-gray-600">{run.method}</div>
</div>
<span className={`px-3 py-1 rounded-full text-xs font-medium ${statusColors[run.status]}`}>
{run.status}
</span>
</div>

```
  <div className="text-sm text-gray-600 mb-3">
    Sample: <span className="font-medium text-gray-900">{run.sample}</span>
  </div>
  
  {run.status === 'running' && (
    <div className="space-y-2">
      <div className="flex justify-between text-sm">
        <span className="text-gray-600">Progress</span>
        <span className="font-medium text-gray-900">{run.progress}%</span>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div
          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
          style={{ width: `${run.progress}%` }}
        />
      </div>
    </div>
  )}
</div>
```

);
}

function DashboardContent() {
return (
<div className="space-y-6">
<div>
<h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
<p className="text-gray-600 mt-1">Welcome back, {mockUser.name}</p>
</div>

```
  {/* Stats */}
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    <StatCard 
      title="Total Runs Today" 
      value="24" 
      change="+12%" 
      icon={Activity}
      trend="up"
    />
    <StatCard 
      title="Active Instruments" 
      value="8/10" 
      change="+2" 
      icon={Settings}
      trend="up"
    />
    <StatCard 
      title="Samples Processed" 
      value="156" 
      change="+8%" 
      icon={FlaskConical}
      trend="up"
    />
    <StatCard 
      title="SPC Alerts" 
      value="3" 
      change="-2" 
      icon={Activity}
      trend="down"
    />
  </div>

  {/* Recent runs */}
  <div>
    <div className="flex items-center justify-between mb-4">
      <h2 className="text-xl font-semibold text-gray-900">Recent Runs</h2>
      <button className="text-sm text-blue-600 hover:text-blue-700 font-medium">
        View all →
      </button>
    </div>
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {mockRecentRuns.map((run) => (
        <RunCard key={run.id} run={run} />
      ))}
    </div>
  </div>

  {/* Quick actions */}
  <div>
    <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      <button className="p-6 bg-white rounded-lg border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50 transition-colors text-center">
        <Activity className="w-8 h-8 text-gray-600 mx-auto mb-2" />
        <div className="text-sm font-medium text-gray-900">New Experiment</div>
      </button>
      <button className="p-6 bg-white rounded-lg border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50 transition-colors text-center">
        <FlaskConical className="w-8 h-8 text-gray-600 mx-auto mb-2" />
        <div className="text-sm font-medium text-gray-900">Add Sample</div>
      </button>
      <button className="p-6 bg-white rounded-lg border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50 transition-colors text-center">
        <BarChart3 className="w-8 h-8 text-gray-600 mx-auto mb-2" />
        <div className="text-sm font-medium text-gray-900">View SPC</div>
      </button>
      <button className="p-6 bg-white rounded-lg border-2 border-dashed border-gray-300 hover:border-blue-500 hover:bg-blue-50 transition-colors text-center">
        <FileText className="w-8 h-8 text-gray-600 mx-auto mb-2" />
        <div className="text-sm font-medium text-gray-900">Generate Report</div>
      </button>
    </div>
  </div>
</div>
```

);
}

// Main App
export default function SemiconductorLabApp() {
const [sidebarOpen, setSidebarOpen] = useState(false);
const [showNotifications, setShowNotifications] = useState(false);

return (
<div className="flex h-screen bg-gray-50">
<Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

```
  <div className="flex-1 flex flex-col overflow-hidden">
    <Header 
      setSidebarOpen={setSidebarOpen}
      showNotifications={showNotifications}
      setShowNotifications={setShowNotifications}
    />
    
    <main className="flex-1 overflow-y-auto">
      <div className="max-w-7xl mx-auto p-6">
        <DashboardContent />
      </div>
    </main>
  </div>
</div>
```

);
}