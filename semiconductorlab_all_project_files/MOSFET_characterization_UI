import React, { useState } from ‘react’;
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from ‘@/components/ui/card’;
import { Button } from ‘@/components/ui/button’;
import { Input } from ‘@/components/ui/input’;
import { Label } from ‘@/components/ui/label’;
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from ‘@/components/ui/select’;
import { Tabs, TabsContent, TabsList, TabsTrigger } from ‘@/components/ui/tabs’;
import { Badge } from ‘@/components/ui/badge’;
import { Alert, AlertDescription } from ‘@/components/ui/alert’;
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from ‘recharts’;
import { PlayCircle, Download, CheckCircle, AlertTriangle, TrendingUp } from ‘lucide-react’;

const MOSFETCharacterization = () => {
const [deviceType, setDeviceType] = useState(‘n-mos’);
const [measurementType, setMeasurementType] = useState(‘transfer’);
const [isRunning, setIsRunning] = useState(false);
const [results, setResults] = useState(null);

// Configuration state
const [config, setConfig] = useState({
width: 10, // μm
length: 1, // μm
tox: 10, // nm
vds_transfer: 0.1, // V
vgs_start: -1,
vgs_stop: 3,
vgs_step: 0.02,
vds_start: 0,
vds_stop: 5,
vds_step: 0.05,
vgs_values: ‘0.5, 1.0, 1.5, 2.0, 2.5’,
temperature: 300
});

// Mock data for demonstration
const transferData = results?.transfer ? results.transfer : Array.from({length: 100}, (_, i) => ({
vgs: -1 + i * 0.04,
ids: Math.pow(Math.max(0, -1 + i * 0.04 - 0.5), 2) * 1e-3 + 1e-12,
log_ids: Math.log10(Math.max(1e-15, Math.pow(Math.max(0, -1 + i * 0.04 - 0.5), 2) * 1e-3 + 1e-12))
}));

const outputData = results?.output ? results.output : [
{ vds: 0, ids_1: 0, ids_2: 0, ids_3: 0, ids_4: 0, ids_5: 0 },
{ vds: 1, ids_1: 0.5, ids_2: 1.0, ids_3: 1.5, ids_4: 2.0, ids_5: 2.5 },
{ vds: 2, ids_1: 0.6, ids_2: 1.2, ids_3: 1.8, ids_4: 2.4, ids_5: 3.0 },
{ vds: 3, ids_1: 0.62, ids_2: 1.24, ids_3: 1.86, ids_4: 2.48, ids_5: 3.1 },
{ vds: 4, ids_1: 0.63, ids_2: 1.26, ids_3: 1.89, ids_4: 2.52, ids_5: 3.15 },
{ vds: 5, ids_1: 0.64, ids_2: 1.28, ids_3: 1.92, ids_4: 2.56, ids_5: 3.2 }
];

const handleRunMeasurement = async () => {
setIsRunning(true);

```
// Simulate API call
setTimeout(() => {
  setResults({
    vth: { value: 0.52, unit: 'V', method: 'linear_extrapolation' },
    gm_max: { value: 0.0089, unit: 'S', vgs: 1.8 },
    subthreshold_slope: { value: 68.5, unit: 'mV/decade', ideal_at_T: 59.6 },
    ion_ioff_ratio: { value: 1.2e7, decades: 7.08 },
    mobility: { value_cgs: 385, unit_cgs: 'cm^2/(V·s)', cv_percent: 5.2 },
    ron: { value: 125, unit: 'Ω', vgs: 2.5 },
    quality_score: 88
  });
  setIsRunning(false);
}, 2000);
```

};

const getQualityColor = (score) => {
if (score >= 80) return ‘text-green-600 bg-green-50’;
if (score >= 60) return ‘text-yellow-600 bg-yellow-50’;
return ‘text-red-600 bg-red-50’;
};

return (
<div className="w-full max-w-7xl mx-auto p-6 space-y-6">
{/* Header */}
<div className="flex justify-between items-center">
<div>
<h1 className="text-3xl font-bold">MOSFET I-V Characterization</h1>
<p className="text-gray-600 mt-1">Transfer and output characteristics analysis</p>
</div>
<Badge className="text-lg px-4 py-2" variant="outline">
{deviceType === ‘n-mos’ ? ‘n-Channel’ : ‘p-Channel’}
</Badge>
</div>

```
  {/* Main Content */}
  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
    {/* Configuration Panel */}
    <Card className="lg:col-span-1">
      <CardHeader>
        <CardTitle>Configuration</CardTitle>
        <CardDescription>Device and measurement parameters</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Device Type */}
        <div className="space-y-2">
          <Label>Device Type</Label>
          <Select value={deviceType} onValueChange={setDeviceType}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="n-mos">n-Channel MOSFET</SelectItem>
              <SelectItem value="p-mos">p-Channel MOSFET</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Measurement Type */}
        <div className="space-y-2">
          <Label>Measurement Type</Label>
          <Select value={measurementType} onValueChange={setMeasurementType}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="transfer">Transfer (Id-Vgs)</SelectItem>
              <SelectItem value="output">Output (Id-Vds)</SelectItem>
              <SelectItem value="both">Both</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Device Geometry */}
        <div className="space-y-2">
          <Label>Width (μm)</Label>
          <Input 
            type="number" 
            value={config.width}
            onChange={(e) => setConfig({...config, width: parseFloat(e.target.value)})}
          />
        </div>

        <div className="space-y-2">
          <Label>Length (μm)</Label>
          <Input 
            type="number" 
            value={config.length}
            onChange={(e) => setConfig({...config, length: parseFloat(e.target.value)})}
          />
        </div>

        <div className="space-y-2">
          <Label>Oxide Thickness (nm)</Label>
          <Input 
            type="number" 
            value={config.tox}
            onChange={(e) => setConfig({...config, tox: parseFloat(e.target.value)})}
          />
        </div>

        {/* Voltage Settings */}
        {measurementType === 'transfer' && (
          <div className="space-y-2">
            <Label>Vds (V)</Label>
            <Input 
              type="number" 
              step="0.1"
              value={config.vds_transfer}
              onChange={(e) => setConfig({...config, vds_transfer: parseFloat(e.target.value)})}
            />
          </div>
        )}

        {measurementType === 'output' && (
          <div className="space-y-2">
            <Label>Vgs Values (V, comma-separated)</Label>
            <Input 
              value={config.vgs_values}
              onChange={(e) => setConfig({...config, vgs_values: e.target.value})}
              placeholder="0.5, 1.0, 1.5, 2.0"
            />
          </div>
        )}

        <div className="space-y-2">
          <Label>Temperature (K)</Label>
          <Input 
            type="number" 
            value={config.temperature}
            onChange={(e) => setConfig({...config, temperature: parseFloat(e.target.value)})}
          />
        </div>

        {/* Action Buttons */}
        <div className="pt-4 space-y-2">
          <Button 
            className="w-full" 
            onClick={handleRunMeasurement}
            disabled={isRunning}
          >
            {isRunning ? (
              <>
                <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full" />
                Measuring...
              </>
            ) : (
              <>
                <PlayCircle className="mr-2 h-4 w-4" />
                Start Measurement
              </>
            )}
          </Button>
          
          {results && (
            <Button variant="outline" className="w-full">
              <Download className="mr-2 h-4 w-4" />
              Export Data
            </Button>
          )}
        </div>
      </CardContent>
    </Card>

    {/* Results and Visualization */}
    <Card className="lg:col-span-2">
      <CardHeader>
        <CardTitle>Measurement Results</CardTitle>
        <CardDescription>
          {results ? 'Analysis complete' : 'Configure parameters and start measurement'}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!results ? (
          <div className="h-96 flex items-center justify-center text-gray-400">
            <div className="text-center">
              <PlayCircle className="h-16 w-16 mx-auto mb-4 opacity-50" />
              <p>No measurement data yet</p>
              <p className="text-sm mt-2">Start a measurement to see results</p>
            </div>
          </div>
        ) : (
          <Tabs defaultValue="transfer" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="transfer">Transfer</TabsTrigger>
              <TabsTrigger value="output">Output</TabsTrigger>
              <TabsTrigger value="parameters">Parameters</TabsTrigger>
            </TabsList>

            {/* Transfer Characteristics */}
            <TabsContent value="transfer" className="space-y-4">
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={transferData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="vgs" 
                      label={{ value: 'Vgs (V)', position: 'insideBottom', offset: -5 }}
                    />
                    <YAxis 
                      label={{ value: 'Ids (A)', angle: -90, position: 'insideLeft' }}
                      scale="log"
                      domain={[1e-15, 1e-2]}
                    />
                    <Tooltip />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="ids" 
                      stroke="#2563eb" 
                      dot={false}
                      name="Ids"
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* Key Metrics */}
              <div className="grid grid-cols-2 gap-4 pt-4">
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">Threshold Voltage</div>
                  <div className="text-2xl font-bold">{results.vth.value.toFixed(3)} V</div>
                  <div className="text-xs text-gray-500">{results.vth.method}</div>
                </div>
                
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">Peak Transconductance</div>
                  <div className="text-2xl font-bold">{(results.gm_max.value * 1000).toFixed(2)} mS</div>
                  <div className="text-xs text-gray-500">at Vgs = {results.gm_max.vgs.toFixed(2)} V</div>
                </div>

                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">Subthreshold Slope</div>
                  <div className="text-2xl font-bold">{results.subthreshold_slope.value.toFixed(1)} mV/dec</div>
                  <div className="text-xs text-gray-500">
                    Ideal: {results.subthreshold_slope.ideal_at_T.toFixed(1)} mV/dec
                  </div>
                </div>

                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">Ion/Ioff Ratio</div>
                  <div className="text-2xl font-bold">{results.ion_ioff_ratio.decades.toFixed(1)} decades</div>
                  <div className="text-xs text-gray-500">
                    {results.ion_ioff_ratio.value.toExponential(2)}
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Output Characteristics */}
            <TabsContent value="output" className="space-y-4">
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={outputData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="vds" 
                      label={{ value: 'Vds (V)', position: 'insideBottom', offset: -5 }}
                    />
                    <YAxis 
                      label={{ value: 'Ids (mA)', angle: -90, position: 'insideLeft' }}
                    />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="ids_1" stroke="#2563eb" name="Vgs=0.5V" dot={false} />
                    <Line type="monotone" dataKey="ids_2" stroke="#7c3aed" name="Vgs=1.0V" dot={false} />
                    <Line type="monotone" dataKey="ids_3" stroke="#db2777" name="Vgs=1.5V" dot={false} />
                    <Line type="monotone" dataKey="ids_4" stroke="#ea580c" name="Vgs=2.0V" dot={false} />
                    <Line type="monotone" dataKey="ids_5" stroke="#16a34a" name="Vgs=2.5V" dot={false} />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              <div className="grid grid-cols-2 gap-4 pt-4">
                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">On-Resistance (Ron)</div>
                  <div className="text-2xl font-bold">{results.ron.value.toFixed(1)} Ω</div>
                  <div className="text-xs text-gray-500">at Vgs = {results.ron.vgs} V</div>
                </div>

                <div className="border rounded-lg p-4">
                  <div className="text-sm text-gray-600">Mobility</div>
                  <div className="text-2xl font-bold">{results.mobility.value_cgs.toFixed(0)} cm²/(V·s)</div>
                  <div className="text-xs text-gray-500">CV: {results.mobility.cv_percent.toFixed(1)}%</div>
                </div>
              </div>
            </TabsContent>

            {/* Parameters Summary */}
            <TabsContent value="parameters" className="space-y-4">
              <Alert className={getQualityColor(results.quality_score)}>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Quality Score: {results.quality_score}/100</span>
                    {results.quality_score >= 80 ? (
                      <Badge className="bg-green-600">Excellent</Badge>
                    ) : results.quality_score >= 60 ? (
                      <Badge className="bg-yellow-600">Good</Badge>
                    ) : (
                      <Badge className="bg-red-600">Review Needed</Badge>
                    )}
                  </div>
                </AlertDescription>
              </Alert>

              <div className="border rounded-lg overflow-hidden">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-2 text-left text-sm font-semibold">Parameter</th>
                      <th className="px-4 py-2 text-left text-sm font-semibold">Value</th>
                      <th className="px-4 py-2 text-left text-sm font-semibold">Unit</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y">
                    <tr>
                      <td className="px-4 py-2">Threshold Voltage (Vth)</td>
                      <td className="px-4 py-2 font-mono">{results.vth.value.toFixed(3)}</td>
                      <td className="px-4 py-2 text-gray-600">V</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">Max Transconductance (gm)</td>
                      <td className="px-4 py-2 font-mono">{(results.gm_max.value * 1000).toFixed(2)}</td>
                      <td className="px-4 py-2 text-gray-600">mS</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">Subthreshold Slope (S)</td>
                      <td className="px-4 py-2 font-mono">{results.subthreshold_slope.value.toFixed(1)}</td>
                      <td className="px-4 py-2 text-gray-600">mV/decade</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">Ion/Ioff Ratio</td>
                      <td className="px-4 py-2 font-mono">{results.ion_ioff_ratio.value.toExponential(2)}</td>
                      <td className="px-4 py-2 text-gray-600">-</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">Mobility (μ)</td>
                      <td className="px-4 py-2 font-mono">{results.mobility.value_cgs.toFixed(0)}</td>
                      <td className="px-4 py-2 text-gray-600">cm²/(V·s)</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">On-Resistance (Ron)</td>
                      <td className="px-4 py-2 font-mono">{results.ron.value.toFixed(1)}</td>
                      <td className="px-4 py-2 text-gray-600">Ω</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">W/L Ratio</td>
                      <td className="px-4 py-2 font-mono">{(config.width / config.length).toFixed(1)}</td>
                      <td className="px-4 py-2 text-gray-600">-</td>
                    </tr>
                    <tr>
                      <td className="px-4 py-2">Oxide Thickness (tox)</td>
                      <td className="px-4 py-2 font-mono">{config.tox}</td>
                      <td className="px-4 py-2 text-gray-600">nm</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
    </Card>
  </div>

  {/* Status Bar */}
  {isRunning && (
    <Alert>
      <TrendingUp className="h-4 w-4 animate-pulse" />
      <AlertDescription>
        Measurement in progress... Acquiring I-V characteristics
      </AlertDescription>
    </Alert>
  )}
</div>
```

);
};

export default MOSFETCharacterization;