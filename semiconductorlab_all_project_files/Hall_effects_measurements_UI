import React, { useState, useEffect } from ‘react’;
import { Card, CardContent, CardHeader, CardTitle } from ‘@/components/ui/card’;
import { Button } from ‘@/components/ui/button’;
import { Input } from ‘@/components/ui/input’;
import { Label } from ‘@/components/ui/label’;
import { Alert, AlertDescription } from ‘@/components/ui/alert’;
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from ‘@/components/ui/select’;
import { Play, Square, Download, AlertTriangle, CheckCircle, TrendingUp, Zap } from ‘lucide-react’;

// Mock data for demonstration
const MOCK_RESULT = {
hall_coefficient: {
value: -125.3,
unit: ‘cm³/C’,
r_squared: 0.9987
},
carrier_type: ‘n-type’,
carrier_concentration: {
value: 4.98e18,
unit: ‘cm⁻³’,
in_scientific: ‘4.98×10¹⁸’
},
hall_mobility: {
value: 1185.3,
unit: ‘cm²/(V·s)’
},
conductivity: {
value: 94.2,
unit: ‘S/cm’
},
sheet_resistance: {
value: 0.201,
unit: ‘Ω/sq’
},
temperature: {
value: 300,
unit: ‘K’
},
measurement: {
type: ‘multi_field’,
num_points: 11,
field_range: [-1.0, 1.0]
},
statistics: {
mean: -2.51e-6,
std: 7.5e-8,
cv_percent: 2.99
},
quality: {
score: 95.5,
level: ‘excellent’,
warnings: []
}
};

const HallEffect = () => {
// State management
const [isConnected, setIsConnected] = useState(false);
const [isRunning, setIsRunning] = useState(false);
const [result, setResult] = useState(null);
const [error, setError] = useState(null);
const [currentField, setCurrentField] = useState(0);

// Configuration state
const [config, setConfig] = useState({
current: ‘0.001’,
magneticField: ‘0.5’,
measurementType: ‘multi_field’,
fieldMin: ‘-1.0’,
fieldMax: ‘1.0’,
numFields: ‘11’,
sampleThickness: ‘0.05’,
temperature: ‘300’,
sheetResistance: ‘’,
useExternalRs: false
});

// Live data
const [liveHallVoltage, setLiveHallVoltage] = useState(0);
const [liveMagneticField, setLiveMagneticField] = useState(0);
const [liveHallCoefficient, setLiveHallCoefficient] = useState(0);

// Simulated instrument connection
const handleConnect = () => {
setIsConnected(true);
setError(null);
};

const handleDisconnect = () => {
setIsConnected(false);
setIsRunning(false);
};

// Simulated measurement
const handleStartMeasurement = () => {
setIsRunning(true);
setError(null);

```
const numPoints = config.measurementType === 'multi_field' 
  ? parseInt(config.numFields) 
  : 10;

let progress = 0;
const interval = setInterval(() => {
  progress += 1;
  
  // Update live values
  const fieldMin = parseFloat(config.fieldMin || -1);
  const fieldMax = parseFloat(config.fieldMax || 1);
  const currentFieldValue = fieldMin + (fieldMax - fieldMin) * (progress / numPoints);
  
  const hallVoltage = -2.5e-6 * currentFieldValue + Math.random() * 1e-7;
  setLiveHallVoltage(hallVoltage);
  setLiveMagneticField(currentFieldValue);
  setCurrentField(progress);
  
  // Calculate approximate Hall coefficient
  const thickness = parseFloat(config.sampleThickness);
  const current = parseFloat(config.current);
  const approxRH = (hallVoltage * thickness) / (current * currentFieldValue);
  setLiveHallCoefficient(approxRH);
  
  if (progress >= numPoints) {
    clearInterval(interval);
    setIsRunning(false);
    setResult(MOCK_RESULT);
  }
}, 800);
```

};

const handleStop = () => {
setIsRunning(false);
setError(‘Measurement stopped by user’);
};

const handleExport = () => {
if (!result) return;

```
const data = JSON.stringify(result, null, 2);
const blob = new Blob([data], { type: 'application/json' });
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = `hall_result_${Date.now()}.json`;
a.click();
```

};

const getCarrierTypeColor = (type) => {
if (type === ‘n-type’) return ‘text-blue-600 bg-blue-50’;
if (type === ‘p-type’) return ‘text-red-600 bg-red-50’;
return ‘text-gray-600 bg-gray-50’;
};

const getQualityColor = (level) => {
if (level === ‘excellent’) return ‘text-green-600 bg-green-50’;
if (level === ‘good’) return ‘text-blue-600 bg-blue-50’;
if (level === ‘acceptable’) return ‘text-yellow-600 bg-yellow-50’;
return ‘text-red-600 bg-red-50’;
};

return (
<div className="w-full max-w-7xl mx-auto p-6 space-y-6">
{/* Header */}
<div className="flex justify-between items-center">
<div>
<h1 className="text-3xl font-bold">Hall Effect Measurement</h1>
<p className="text-gray-600 mt-1">Carrier concentration, mobility, and type determination</p>
</div>
<div className="flex gap-2">
{!isConnected ? (
<Button onClick={handleConnect} variant="default">
<Zap className="mr-2 h-4 w-4" />
Connect Instrument
</Button>
) : (
<Button onClick={handleDisconnect} variant="outline">
Disconnect
</Button>
)}
</div>
</div>

```
  {/* Status Alert */}
  {error && (
    <Alert variant="destructive">
      <AlertTriangle className="h-4 w-4" />
      <AlertDescription>{error}</AlertDescription>
    </Alert>
  )}

  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
    {/* Configuration Panel */}
    <Card className="lg:col-span-1">
      <CardHeader>
        <CardTitle>Measurement Configuration</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="measurementType">Measurement Type</Label>
          <Select 
            value={config.measurementType}
            onValueChange={(val) => setConfig({...config, measurementType: val})}
            disabled={isRunning}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="single_field">Single Field (Repeated)</SelectItem>
              <SelectItem value="multi_field">Multi-Field (Recommended)</SelectItem>
            </SelectContent>
          </Select>
          <p className="text-xs text-gray-500 mt-1">
            Multi-field eliminates offset voltages
          </p>
        </div>

        <div>
          <Label htmlFor="current">Test Current (A)</Label>
          <Input
            id="current"
            type="number"
            step="0.001"
            value={config.current}
            onChange={(e) => setConfig({...config, current: e.target.value})}
            disabled={isRunning}
          />
        </div>

        {config.measurementType === 'single_field' ? (
          <div>
            <Label htmlFor="magneticField">Magnetic Field (T)</Label>
            <Input
              id="magneticField"
              type="number"
              step="0.1"
              value={config.magneticField}
              onChange={(e) => setConfig({...config, magneticField: e.target.value})}
              disabled={isRunning}
            />
          </div>
        ) : (
          <>
            <div className="grid grid-cols-2 gap-2">
              <div>
                <Label htmlFor="fieldMin">Field Min (T)</Label>
                <Input
                  id="fieldMin"
                  type="number"
                  step="0.1"
                  value={config.fieldMin}
                  onChange={(e) => setConfig({...config, fieldMin: e.target.value})}
                  disabled={isRunning}
                />
              </div>
              <div>
                <Label htmlFor="fieldMax">Field Max (T)</Label>
                <Input
                  id="fieldMax"
                  type="number"
                  step="0.1"
                  value={config.fieldMax}
                  onChange={(e) => setConfig({...config, fieldMax: e.target.value})}
                  disabled={isRunning}
                />
              </div>
            </div>
            <div>
              <Label htmlFor="numFields">Number of Points</Label>
              <Input
                id="numFields"
                type="number"
                value={config.numFields}
                onChange={(e) => setConfig({...config, numFields: e.target.value})}
                disabled={isRunning}
              />
            </div>
          </>
        )}

        <div>
          <Label htmlFor="thickness">Sample Thickness (cm)</Label>
          <Input
            id="thickness"
            type="number"
            step="0.001"
            value={config.sampleThickness}
            onChange={(e) => setConfig({...config, sampleThickness: e.target.value})}
            disabled={isRunning}
            placeholder="0.05 (500 μm)"
          />
        </div>

        <div>
          <Label htmlFor="temperature">Temperature (K)</Label>
          <Input
            id="temperature"
            type="number"
            value={config.temperature}
            onChange={(e) => setConfig({...config, temperature: e.target.value})}
            disabled={isRunning}
          />
        </div>

        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="useExternal"
            checked={config.useExternalRs}
            onChange={(e) => setConfig({...config, useExternalRs: e.target.checked})}
            disabled={isRunning}
            className="w-4 h-4"
          />
          <Label htmlFor="useExternal">Use External Rs</Label>
        </div>

        {config.useExternalRs && (
          <div>
            <Label htmlFor="sheetResistance">Sheet Resistance (Ω/sq)</Label>
            <Input
              id="sheetResistance"
              type="number"
              step="0.01"
              value={config.sheetResistance}
              onChange={(e) => setConfig({...config, sheetResistance: e.target.value})}
              disabled={isRunning}
              placeholder="From 4PP measurement"
            />
          </div>
        )}

        <div className="pt-4 space-y-2">
          <Button
            onClick={handleStartMeasurement}
            disabled={!isConnected || isRunning}
            className="w-full"
          >
            <Play className="mr-2 h-4 w-4" />
            Start Measurement
          </Button>
          
          {isRunning && (
            <Button
              onClick={handleStop}
              variant="destructive"
              className="w-full"
            >
              <Square className="mr-2 h-4 w-4" />
              Stop
            </Button>
          )}
        </div>
      </CardContent>
    </Card>

    {/* Live Data & Results */}
    <div className="lg:col-span-2 space-y-6">
      {/* Live Readings */}
      {isRunning && (
        <Card>
          <CardHeader>
            <CardTitle>Live Readings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">
                  {(liveHallVoltage * 1e6).toFixed(3)} μV
                </div>
                <div className="text-sm text-gray-600">Hall Voltage</div>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">
                  {liveMagneticField.toFixed(3)} T
                </div>
                <div className="text-sm text-gray-600">Magnetic Field</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-xl font-bold text-green-600">
                  {liveHallCoefficient.toExponential(2)}
                </div>
                <div className="text-sm text-gray-600">R_H (cm³/C)</div>
              </div>
            </div>
            <div className="mt-4">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-purple-600 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${(currentField / parseInt(config.numFields)) * 100}%` }}
                />
              </div>
              <p className="text-center text-sm text-gray-600 mt-2">
                Measuring point {currentField} of {config.numFields}...
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Results */}
      {result && (
        <>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Hall Effect Results</CardTitle>
              <Button onClick={handleExport} variant="outline" size="sm">
                <Download className="mr-2 h-4 w-4" />
                Export
              </Button>
            </CardHeader>
            <CardContent>
              {/* Main Results Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                {/* Hall Coefficient */}
                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6">
                  <div className="text-sm text-gray-600 mb-2">Hall Coefficient</div>
                  <div className="text-3xl font-bold text-purple-600">
                    {result.hall_coefficient.value.toFixed(1)}
                  </div>
                  <div className="text-lg text-gray-700 mt-1">
                    {result.hall_coefficient.unit}
                  </div>
                  {result.hall_coefficient.r_squared && (
                    <div className="text-sm text-gray-500 mt-2">
                      R² = {result.hall_coefficient.r_squared.toFixed(4)}
                    </div>
                  )}
                </div>

                {/* Carrier Type */}
                <div className={`rounded-lg p-6 ${getCarrierTypeColor(result.carrier_type)}`}>
                  <div className="text-sm mb-2">Carrier Type</div>
                  <div className="text-4xl font-bold">
                    {result.carrier_type}
                  </div>
                  <div className="text-sm mt-2">
                    {result.carrier_type === 'n-type' ? 'Electrons (negative)' : 'Holes (positive)'}
                  </div>
                </div>

                {/* Carrier Concentration */}
                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6">
                  <div className="text-sm text-gray-600 mb-2">Carrier Concentration</div>
                  <div className="text-3xl font-bold text-blue-600">
                    {result.carrier_concentration.in_scientific}
                  </div>
                  <div className="text-lg text-gray-700 mt-1">
                    {result.carrier_concentration.unit}
                  </div>
                </div>

                {/* Hall Mobility */}
                {result.hall_mobility && (
                  <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-6">
                    <div className="text-sm text-gray-600 mb-2">Hall Mobility</div>
                    <div className="text-3xl font-bold text-green-600">
                      {result.hall_mobility.value.toFixed(1)}
                    </div>
                    <div className="text-lg text-gray-700 mt-1">
                      {result.hall_mobility.unit}
                    </div>
                  </div>
                )}
              </div>

              {/* Secondary Results */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                {result.conductivity && (
                  <div className="p-3 border rounded-lg">
                    <div className="text-sm text-gray-600">Conductivity</div>
                    <div className="text-lg font-semibold">
                      {result.conductivity.value.toFixed(2)} {result.conductivity.unit}
                    </div>
                  </div>
                )}
                
                {result.sheet_resistance && (
                  <div className="p-3 border rounded-lg">
                    <div className="text-sm text-gray-600">Sheet Resistance</div>
                    <div className="text-lg font-semibold">
                      {result.sheet_resistance.value.toFixed(3)} {result.sheet_resistance.unit}
                    </div>
                  </div>
                )}

                <div className="p-3 border rounded-lg">
                  <div className="text-sm text-gray-600">Temperature</div>
                  <div className="text-lg font-semibold">
                    {result.temperature.value} {result.temperature.unit}
                  </div>
                </div>

                <div className="p-3 border rounded-lg">
                  <div className="text-sm text-gray-600">Measurement Type</div>
                  <div className="text-lg font-semibold capitalize">
                    {result.measurement.type.replace('_', '-')}
                  </div>
                </div>

                <div className="p-3 border rounded-lg">
                  <div className="text-sm text-gray-600">Data Points</div>
                  <div className="text-lg font-semibold">
                    {result.measurement.num_points}
                  </div>
                </div>

                <div className="p-3 border rounded-lg">
                  <div className="text-sm text-gray-600">CV%</div>
                  <div className="text-lg font-semibold">
                    {result.statistics.cv_percent.toFixed(2)}%
                  </div>
                </div>
              </div>

              {/* Quality Assessment */}
              <div className="space-y-2">
                <div className={`flex items-center gap-2 p-3 rounded-lg ${getQualityColor(result.quality.level)}`}>
                  <CheckCircle className="h-5 w-5" />
                  <div>
                    <div className="font-semibold">
                      Quality: {result.quality.level.toUpperCase()}
                    </div>
                    <div className="text-sm">
                      Score: {result.quality.score.toFixed(1)}/100
                    </div>
                  </div>
                </div>

                {result.quality.warnings.length > 0 && (
                  <div className="bg-yellow-50 rounded-lg p-3">
                    <div className="font-semibold text-yellow-800 mb-2">Warnings:</div>
                    <ul className="text-sm text-yellow-700 space-y-1">
                      {result.quality.warnings.map((warning, idx) => (
                        <li key={idx}>• {warning}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Plot Placeholder */}
          <Card>
            <CardHeader>
              <CardTitle>Hall Voltage vs Magnetic Field</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg border-2 border-dashed">
                <div className="text-center text-gray-500">
                  <TrendingUp className="h-12 w-12 mx-auto mb-2" />
                  <div className="text-lg font-semibold mb-2">Linear Regression Plot</div>
                  <div className="text-sm">
                    V_H vs B showing R² = {result.hall_coefficient.r_squared?.toFixed(4)}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  </div>
</div>
```

);
};

export default HallEffect;